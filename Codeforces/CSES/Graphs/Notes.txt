DFS, BFS logic
TC: DFS & BFS
    Each node is processed exactly once and for a particular node, we are processing all its neighbours which is basically equivalent to the degree of that node
    So if we consider the amount of work for all the nodes, it is basically equivalent to processing the sum of degree of all the nodes which equals 2*e
    Hence O(V) + O(2*E)
    The 2*E factor is true for undirected graph. For directed graphs this factor might change

Space optimisation for visited array by modifying the input 
    In order to mark a node/cell visited, replace it with a value that doesn't exist in the graph.
    the only problem with this is it causes the change in the input which is generally not desired, but here it is helping us to optimise the space for the visited array
    No need to backtrack the changes made. This changes must persist then only we will be able to keep track of the visited cells

We always have to assume that the graph is disconnected, hence we need to check for all the connected components

Checking cycle in a directed graph:
    - We could not apply the same logic that we did in case of an undirected graph. Take this graph for instance 1 -> 0
    - We dont have any cycle but the undirected graph algo will return true which is incorrect.
    - That's why we have a different algo for directed graph

Count no of distinct islands (graphs_core_concepts - under graphs section)
    - Main trick here is to track the shape of the island. We have to return the count of unique islands.
    - The starting point of your dfs would be your base coord. Store all the coord (x - ox, y - oy) in a vector. This vector will track the shape
    - Inssert this vector into a set that will help us to track the unique shapes

Find eventual safe states   (Good question)
    -- Direct application of detect cycle in directed graph
    -- was initially thinking of reversing the edges of the graph and performing dfs(but we wont acheived anything)
    -- For directed graph questions, think along the lines of detecting cycle in DG


Monsters CSES revisit [Not solved yet]


Shortest Routes1 CSES [Solved but Revist]
Shortest Routes1 CSES [Solved but Revist]
    Shortest path algorithms
         - Djkstra ->(Single Source, both UG and DG, TC: O(ELogV)) You use a min heap (dist,node) and dist & vis array. 
         - Bellmann Ford - (Single Source, DG, TC: O(E*V)) used when you have -ve edge weights or -ve edge wt cycle. Relax all the edges N-1 times. Perform relaxation 1 more time: if the weights are still getting updated then you have a -ve edge weight cycle 
         - FloydWarshall - (Multi Source, both UG and DG, adjMatrix, helps you to detect -ve edge wt cycle as well, TC: O(V^3)) cost matrix is generated at the end that gives the shortest cost b/w any 2 vertices
                -- cost of a node from itself i.e cost[i][i] ideally should be 0, but if for any vertex this cost[i][i] < 0 it means the graoh contains a -ve wt cycle 
                -- If the graph contains -ve wt cycle, then finding the shortest path doesn't make any sense(the weights will keep on reducing)
                -- Remember: you can acheive the same output by applying Djkstra V times considering each node as the src node TC would be O(V * ElogV) which is better than Floyd Warshall O(V^3)
                -- But Floyd Warshall has a unique prospect that it works on graphs with -ve edge wts. Djkstra fails in this scenario
                -- The graph needs to be stored in the form of an adj Matrix for processing purposes


High Score, Flight Score - Implement Later

***Flight Routes(Djkstra Variation) -> Usually we find single path, but in this problem we are supposed to find k shortest path. This problem talks about how to find single source k shortest paths from src to dest

In Djkstra, can we also find the path

**Revisit all questions 1 more time after the first round** 


1. Count the no of components
2. Find the shortest path from src cell to dest cell in the matrix. Print its length and also the path  
    - shortest path --> use bfs 
    - to keep track of the path(ie. the direction from which we landed on the current cell) --> temp matrix
    -- temp matrix will help in the path construction when we reach the destination
4. Shortest path --> use bfs and with the help of map you can construct the path
    if you have to determine min cost path -> then use Djkstra
    Shortest path(in terms of length from src to dest)
    min cost path(in terms of minimum cost from src to dest)
5. Bipartite graph: check if you can divide the nodes of the graph in 2sets such that no vertices in a set are connected to each other
6. Monsters: 
    first find the min time a monster takes to reach a certain cell - can be done using Djkstra
    perform bfs to find the shortest path
7. Shortest Routes1: Djkstra implementation (DV): need dist & vis array for Djkstra 
8. Shortest Routes2: shortest route b/w any 2 nodes --> bellmann O(n^3)
                    single source to all nodes shortest path -> Djkstra(O(elogv))
    In this question it's not mentioned that we could have atmost one edge b/w 2 cities
    Generally this is the assumption, but here in this problem we can have more than 1 edges b/w 2 cities. 
    Hence while applying bellman, we have to take min edge wt into consideration. This is an unusual edge case
Investigation CSES -- Pending


Planet queries 1 [https://www.youtube.com/watch?v=oib-XsjFa-M&ab_channel=ErrichtoAlgorithms]
    - Binary Lifting concept: Given a node, find kth ancestor/child of that node
    - since every no can be writting in base 2, we will use this to find the kth ancestor of the node in O(logK) time instead of doing it in a brute force O(K)
    - so far each node, I will compute 2^i th ancestor/child

    How can you improve complexity from O(n) to O(logn)
        a. Divide by 2 (Binary Search, Divide and conquer)
        b. Powers of 2 appears in (binary lifting, sparse tables and segment trees)

    int up[N][logN] - max depth of the tree, or let's just say logN
    up[V][j] - 2^jth ancestor of V
    for v=0,1,2,...N-1 
        up[v][0] = parent[v]
        up[v][1] = up[ up[v][0] ][0]
        up[v][2] = up[ up[v][1] ][1]
        up[v][3] = up[ up[v][2] ][2]

    recurrence relation: t[i][j] = t[t[i][j-1]][j-1]
    fill the first column first(we know parent of each node), & then we start filling the next columns

    Note: Binary Lifting can be applied to find 2^ith parent/child for a given node. Finding child or parent depends upon what is asked in the question
    Also learned an optimisation trick, without which the code was giving TLE. In cpp, no of column are always preffered to be more than the no of rows 
    We can store the matrix in any fashion, but the above mentioned method is more optimal  


Planet Queries 2, Planet Cycles  --> Hard Problems 
    both these questions use basically the same logic
    here we have to find the distance of each node from the cycle and size of the cycle
    For planet cycles question, the nodes which are already a part of a cycle, their ans is cycle.size(). Here the cycle is that cycle of which they are a part of 
    if a node is not a part of a cycle, here we will need to know it's distance from the nearest cycle 
    
    [Implementation pending for both problems ]


Road Reparation
    kruskal's algo (Union find algo)

Road construction
    Union find algo 

FlightRoutesCheck, PlanetsAndKingdoms
    Strongly connected components(SCC) [Kosaraju algo]
    In a SCC, every pair of vertex is reachable to each other 
    Count the no of SCC & Print the SCC
    Assume you have 4 scc's
    
    Intuition  Striver [ https://www.youtube.com/watch?v=R6uoSjZ2imo&ab_channel=takeUforward ]
    scc1 -> scc2 -> scc3 --> scc4
    If I start dfs from any node in scc1, it will endup visiting all the nodes in the graph
    But now If I reverse the edges in the graph 

    scc1 <- scc2 <- scc3 <- scc4
    If I start dfs from any node in scc1, I'll only be able to visit the nodes in scc1. I cannot move out of scc1 

    reversing the edges in an scc won't change anything. It'll pretty much be in the same state
    Hence we reverse the edges of the entire graph, so that dfs happens in invidual scc's

    But what happens when node 0 which is the starting point of our dfs traversal lies in scc4. After reversal of edges, I would end up covering all the vertices 
    This is where starting time and ending time comes into picture

    3steps process:
    1. sort all the edges according to the finishing time - perform dfs and store all the nodes in a stack while backtracking 
    2. Reverse all the edges in the graph
    3. perform dfs 


    The node which finishes the last(i.e st.top()) in the dfs, belongs to scc1. 
    
    Now you reverse the edges of the graph
        scc1 <- scc2 <- scc3 <- scc4

    Again start dfs from the node at stack's top. This node belongs to scc1 & since we have reversed the edges of the graph we won't be able to move out of scc1
    
    That is why sorting the edges based on end time and reversing the edges of the graph was important 



Giant Pizza [ Hard Problem ]
    2-SAT problem, Graph Construction
    how can we model this problem : x1, x2, x3, x4 represents we want to take this toppings. Similary, x1bar, x2bar, x3bar indicates we dont want this 
    Test case 1: 
    3 5
    + 1 + 2
    - 1 + 3
    + 4 - 2

    Eqn: (x1 U x2) intersection (x1bar U x3) intersection (x4 U x2bar)
    We want to make every person happy, hence taking intersection of all 
    x1=1, x2=1, x3=1, x4=1
    These values make the eqn true

     Test Case 2 
    L = (x1 U x2) intersection (x1 U x2bar) intersection (x1 U x3) intersection (x2bar U x3bar)
    We neither can assign x1=1 nor x1=0. Hence no solution is possible for this case

    edge from a ---> b represents: if a is true then b is also true
    
    x2 U x1bar
    if x2 is not set(means x2 bar is set ), then x1 bar must be set which means there is an edge from x2bar to x1bar
    Similarly if x1bar is not set(means x1 is set) then x2 must be set which means there is an edge from x1 to x2

    x1bar U x2bar
    if x1bar is unset(means x1 is set), then x2bar must be set which means there is an edge from x1 to x2bar
    if x2bar is unset(means x2 is set), then x1bar must be unset which means there is an edge from x2 to x1bar

    adj:
    x1 -> x2, x2bar
    x2 -> x1bar
    x1bar -> 
    x2bar -> x1bar   

    These way we can construct the graph.
    Now if I try to find out the strongly connected components 

    If xi and xibar are part of the same connected component, then ans is impossible since we cannot satisfy both the elements simaltaneously


    Strongly connected component 
    Implementation Pending 



Coin Collector {SCC + DP}
    Very good problem 
    Condense the original graph into graph of connected components(basically each connected component represents 1 node) 
    While condensing also compute the total coins for each SCC
    Use DP to compute the max no of coins that can be obtained. We could start from any node(but starting from the node whose indegree=0 makes more sense, bcoz that node would give us the best starting point)
    obt(sv) -> returns the max coins that can be collected given that our starting point is sv
    recurrence: obt(sv) = coins[sv] + max coins from all its neigbhours
    for instance, assume sv has 3 nb: a,b,c 
    obt(sv) = coins[sv] + max({obt(a), obt(b), obt(c)})
    i.e get the max coins from all its neigbhours
    for the sink node, there would be no neigbhours, hence dp[sink_node] = coins[i]
    Note: here coins[i] represents the total coins of that ith component 
    So instead of using coins[i], use component_coins[i]


Mail Delivery [New Algo]
    Euler circuit
    Given a starting point, we have to determine a route that traverses each edge exactly once and returns back to the starting point 
    basically we have to find if there exists a Euler circuit.
    For Euler circuit to exist, the degree of all nodes should be even. 
    In Euler circuit, we need to ensure that each edge is traversed exactly once and we cover all the edges and return back to the starting point. 
    During this, we could visit a vertex more than once

Teleporter's path 
    Euler Path 


Hamiltonian Flights 
    DP + bitmasking + Graphs
    Implementation Pending  -- Getting TLE 11/20 Passed

Knights Tour [Warnsdorff’s heuristic]
    - Not a graph problem 
    - normal brute force backtrack solution will not work, since we have multiple combinations and checking each one of them will cause stack overflow
    -- instead we use warnsdorff's heuretics to explore those positions firt that have a fewer onward moves
    -- so we sort all the possible positions, based on it's heuretics value in the ascending order which means the positions which have fewer onward moves will be processed first 
    -- and call dfs on the sorted positions. If any of the position, returns true you have your ans, else you backtrack(while backtracking unmark/unvisit the cell) and return false
    -- this way we will then explore the next best possible option 
    -- Overall Wanderdorrfs heuretics reduces the complexity dratically by allowing us to explore the possible options based on its heurestic value


Download Speed
    Max Flow Algorithm
    New Topic -- see tutorials on youtube

Download Speed 
    Network Flow / Max Flow Algorithm
        In order to understand the concept of Network flow, we must first identify the max flow of the graph 
        max flow is the maximum flow we can push through the network given that each edge has a certain capacity  
        each edge has a flow & capacity associated with it 
        initially the flow is 0 for all the edges 
        There are 2 special nodes the source and the sink node 
        Max Flow Algo helps us to calculate -> with an infinite input source, what is the max flow can we push through the network given that each edge has a certain capacityu
        Effectively, max flow is the bottleneck value 
        The max flow for a network is the sum of the flows entering the sink node . 
        That's the most we can push through the network 
        To find the maximum flow (and min-cut as a bu product), the ford fulkerson method repeateadly finds augmenting paths through the residual graph and augments the flow until no more augmenting paths can be found
        Every augmenting path will have a bottleneck value and the sum of the bottlenecks found in each augmenting path is equal to the max flow!
        The ford fulkerson algo continues finding augmenting paths and augments the flow until no more augmenting paths from source to sink exists 

    implmentation https://www.youtube.com/watch?v=RppuJYwlcI8&ab_channel=WilliamFiset
        Edmond Karps - uses a bfs to finding augmenting paths 
            The idea Edmond Karps is instead of using a DFS, we can use BFS to find augmenting paths which yields an arguably better TC of O(V*E*E)
            THe major difference in this approach is that the TC no longer depends on the capacity value of any edge 
            This algo repeateadly finds the shortest augmenting path from s->t in terms of the no of edges used each iteration 
            Do a BFS from the source and end at the sink. While exploring the flow graph, remember that we can only reach a node if the capacity of the edge to get there is > 0
        TC: O(E*E*V)
        Ford fulkerson - uses dfs to finding the augmenting paths 
            At a high level, this algo states that all we want to do is repeateadly find augmenting paths from s->t in the flow graph , augment the flow and repeat until no more paths exists
            The key takeaway here is that this algo does not specify how to actually find the augmenting paths. This is where optimisations come into play.
            This algo uses a DFS to find augmenting paths and takes O(E*f) where E is the no of edges and f is the max flow of the network. 
            However the pitfall is TC depended on the capacity value of the edges in the graph
            DFS traversal chooses the edges in a random order, so it is possible to pick the middle edge every time when finding an augmenting path 
            [Referring to an example graph from the video]
        TC: O(F*E)
        Summary:
            A DFS will sometimes find long windy paths from source to the sink. 
            THis is Usually undesirable because the longer the path, the smaller the bottleneck value, which results in a longer runtime.
            Edmond Karp's tries to resolve this problem by finding the shortest path from the source to the sink using a BFS 
            More importantanly, the big achievement of Edmond Karp is that its TC of O(V*E*E) is independent of the max flow 


Distinct Routes
    -- problem is based on maxflow concept
    -- Doubt: Why are we using a separate dfs() to construct the path. Using the parent vector populated during bfs is giving WA
    Below is the sample test case:
        8 9
        1 2
        2 3
        3 8
        1 4
        4 5
        5 3
        2 6
        6 7
        7 8


School Dance:
    Doubt: Not sure on the approach 



Usecase:
1. Find the min cost path - Djkstra  (Investigation CSES)
2. Find the no of min cost path       (Investigation CSES)  
3. Find the shortest & longest length of the min cost from src to dest      (Investigation CSES)        
4. count the no of paths from src to dest.                     (GraphRoutes CSES)
5. Find the length of the longest path and also the path from src to dest     (LongestFlightRoute CSES)
6. Detecting the Starting and ending point in a cycle       {RoundTrip2 CSES}


Neetcode Revise:
Graphs: 
    Clone Graph   -- dfs 
Advanced Graph:
    Reconstruct Itenary
    Swim in rising water
    Alien Dictionary
    Cheapest Flights within K Stops  -- djkstra variation


TODO:
Why the parent logic works only in UG for detecting cycles? or why can't we use the parent logic in detecting cycles for DG?
Why are we using pq in djkstra and not a normal queue? or why can't we use a normal queue in djkstra

Apply this tags on LC and practise : Union Find, Shortest Path


Cheapest Flight within K Stops
    1. There might exist a path that has a higher cost but satisfies the stops requirement. Djkstra will only focus on the lowest cost path which might not even satisfy the no of stops allowed
    2. Hence using cost as the deciding factor is not feasible. We will also have to consider the no of stops taken
    NOTE: There might exist a path with a higher cost which satisfies the no of stops in contrary to the lowest cost path which might not
    3. We can use queue & priority_queue both in the djkstra kind of problems. 
    4. Here in this problem we are choosing no of stops as our deciding factor and since the increase in stops from each node to other is constant i.e 1, we can leverate queue here instead of priority queue
    If the increase is not constant lets say in case of edge weights, then priority_queue would have made more sense 
    So the use queue or priority_queue depends upon the problem scenario, we can use either of this 
    By using Queeu we are saving on logarithmic factor that would have been applicable in case priority_queue
    NOTE: Problems where you can use queue for DJkstra, you can also use priority_queue, but the reverse is not true 
    Priority queue just helps you to get the best of all in terms of the lowest cost/any other factor in O(1),  but when all the nodes have equal weightage, using priority_queue wont make much sense 

    Need Vis array for finding Shortest Path?
        No, We dont need a vis array in case of finding the lowest cost path because let's say there are 2 routes to reach dest the first routet costs more and marks the dest visisted, now the second route though it costs less, 
        we won't be able to explore that option since the vis is already visited.
        Hence in order to allow other prospective path which can cost less we don't keep track visited vertices

    Will a normal Queue work in Djkstra based problems?
        Yes, we can a normal queue if the rise in the decidiing factor is constant. Using a normal queue gives us the most optimal solution 

    BFS vs Djkstra
        BFS works for unweighted graphs or graphs where the edge weight is constant. 
        priority_queue needs to be used when the edge weights is not constant and we need the lowest cost path. 
        BFS is guranteed to give the shortest path(works in case of unweighted graph), but since the graph is weighted, it may not produce the lowest cost path
        That's why we use Djkstra --> shortest cost path from src to all nodes. the only extra condition here is we can take atmost k intermediate stops
        If the edge weights are constant, we can use BFS to get the shortest path 
        but if the weights are not constant, we will have to use a priority_queue bcoz this will give priority to the lower cost edges and will help us to get the cheapest path 

    When to stop shortest path Algorithms
        This is a valid question that should we stop at the first encounter of dest or should we continue processing the vertices.
        In some problems we stopped at the very first encouter of dst, whereas in this problem we will have to continue processing coz there is a possibility that in fuutre we could reacch at a better price







Core Algorithms: https://blog.algomaster.io/p/master-graph-algorithms-for-coding
1. Detect Cycle
    1.1 for UG
    1.2 for DG
2. Topological Sort 
3. Union Find 
4 Shortest Path Algorithms
    4.1 Kruskals
    4.2 Prims
    4.3 Djkstra 
        TC: O(ElogV)/O(E) depending upon the implementation via using queue or priority_queue  -- can use queue or priority_queue both depending on the problem statement {Refer Cheapest Flight Within K Stops problem}
        SC: O(V+E) for adj list + O(V) for dist array + O(V) for queue/priority_queue
    4.4 Bellman Ford    
    4.5 Floyd Warshall
5. Euler circuit (Hierholzer's Algo)
6. Strongly Connected Algo (Kosaraju)
7. Hamiltonian path 
8. Bipartite
9. Kahn's Algo
10. Max Flow Algorithm 

    