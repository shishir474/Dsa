Segment Trees [https://www.youtube.com/watch?v=-dUiRtJ8ot0&ab_channel=takeUforward]
1. They are used for solving range query based problems like for instance you are given an array of n elements & q queries each of the form l,r. You have to find max element in the array in the index range of l to range
or to find sum of elements in range of arr[l] to arr[r]
brute force of doing this is solve for each query via traversing over each eleemnt which is O(n) for each query 
i.e O(n*q) for all queries 
This will give TLE since N and Q <= 1e5

Segment Tree is nothing but a data structure which stores the resultant of a given range in a given index in an array
Assume you have 10 elements in the array index-> 0 to 9
Segment Tree in its root node stores the result of range 0 to 9 and is marked as 0
It has 2 childrens
    left child index: 2*index_of_parent + 1 (2*0 + 1 = 1) --> stores the resultant of range 0 to 4 
    right child index: 2*index_of_parent + 2 (2*0 + 2 = 2) --> stores the resultant of range 5 to 9
    (0 + 9)/2 = 4 so 0 to 4 results will be stored in left child 
    and 5 to 9 result will be stored in right child

Similaly 0 to 4 range gets divided into 2 children 
    left child index : 2*1 + 1 = 3 manages range 0 to 2 
    rigth child index: 2*1 + 2 = 4 manages range 3 to 4

and range 5 to 9 gets divided into 2 children
    left child index : 2*2 + 1 = 5 manages range 5 to 7
    right child index : 2*2 + 2 = 6 manages range 8 to 9

and so on 

You start evaluating the answer for each node in the bottom up approach ie from the leaf nodes


Segment Tree is kinda tree structure but you store the data in an array, since you've already indexed it as 0,1,2, and so on
Each index represents the result of a specific range 

The value of N = 10 and we went till 24th index in the segment tree 

NOTE: 
    The max value that the node indexing can go in seg tree is 4*N where N is the size of the array


1. Traversing Segment Tree
    WHile traversing you'll encounter 3 situations
    1. Either the range completely lies inside the range of the current index 
    2. It lies outside the range of the current index
    3. partial overlap 

TC:
    Tree Construction:  is O(N) where N is the size of the array
    Querying: O(logN)
        Height of tree is O(logN) since we are splitting into powers of 2 at each level
        So at max we'll be reaching the bottom of the tree which will just take O(logn)



2. Range Update Queries { Excellent Problem}
    Point Update + Segment Sum 
    Uses Difference Array technique
    What is difference array technique? Assume you are given an array of size n and q queries of the form increase value for range l to r by x 
    You want to print the final state of the array 
    First compute the difference array using diff[i] = arr[i] - arr[i-1] for all i >= 1
    diff[0] = arr[0];
    Increasing value by x from l to r is equivalent to 
    doing diff[l]+=x and diff[r+1]-=x such that r+1 < n
    and then compute the prefix sum of the array 

    Now here we want to find value of a particular index after the operation, so this is equivalent to finding prefix sum of [0 to k], assuming you want to find value of position K
    finding Prefix sum can be done in O(logn) using Segment tree 

    Build a Seg tree on the difference array 
    For update queries, update the tree values at the position l and r+1 by +x and -x 
    For finding value at the kth index, calculate sum of the segment [0 to K]


3. Forrest Queries 
    Not a segment Tree Problem
    Uses concept of 2D Prefix arrays

4. Hotel Queries:  [Important]
    You want to support queries of the following form on an array 
    (along with point updates).
    Find the first i such that ai >= x.

    Used Segment tree to keep track of the max element in a particular segment 
    If at a particular node [l,r] we know for sure that the anwer lies in this range then 
    we first check the left child if (seg[2*index + 1] >= val) we move left  ie in range [lo,mid]
    otherwise we move right [mid+1,hi]

5. List Removals {Excellent Problem}
    Tags: Ordered_set 

    Why Ordered Set (PBDS Tree) is Ideal

    ‚úÖ 1. Efficient ‚Äúk-th element‚Äù Access
        ‚Ä¢	find_by_order(k) gives you the k-th smallest element in O(log n) time.
        ‚Ä¢	This is equivalent to accessing the k-th index in a sorted or ordered list.
        ‚Ä¢	Standard C++ containers like set or unordered_set don‚Äôt support this ‚Äî you‚Äôd need to manually keep track of order, which is inefficient.

    ‚úÖ 2. Efficient Deletion
        ‚Ä¢	erase() deletes an element in O(log n) time.
        ‚Ä¢	You‚Äôre doing this every iteration after selecting the k-th element.
        ‚Ä¢	A normal array/vector would require O(n) time for deletion since elements need to be shifted.


6. Salary Queries  {Excellent Problem}
    Tags: Ordered sets / Segment Tree + Coordinate compression

    Solution 1: Using Ordered sets  - Done
    Solution 2: Using segment trees - Getting WA , Revisit the implementation 
                Understanding why coordinate compression is required here is also crucial 


7. Prefix Sum Queries   {Excellent problem}
    Tags: Segment Trees
    Here each node of the segTree will store 2 metrics

    Understanding what we need to store at each node of the segTree is the main part of the problem 
    here for instance, at each node of the seg Tree we need to store 2 things:
    a. sum of the elements in the range 
    b. max prefix sum in the range 

    To calculate seg[i],

    The sum would be equal to left.sum + right.sum
    The maximum prefix has to end at either the left segment (left.pref), or at the right segment (left.sum + right.pref), 
    so pref would equal max(left.pref, left.sum + right.pref)

    in order to compute the max prefiex sum for a range, we;ll also need to sum of elements in a range


8. Pizzeria Queries     {Excellent Problem}
    Tags: Segment Tree
    Here we need 2 segment trees to track 2 minimum costs

    When we query the minimum cost to buy a pizza at point i, we can split it into cases 

    going downwards (j < i): the cost would be p[j]-j+i
    going upwards (j > i): the cost would be p[j]+j-i


    Since +i and -i are constant, we can first calculate the best cost and then add +i for the downwards cost and -i for the upwards cost.

    Thus, if we keep two min segtrees (one for going downwards and one for going upwards), we can keep track of the minimum cost by setting each value in the
    downwards segtree to p[j]-j and each value in the upwards segtree to p[j]+j.

    To query, we can simulate going downwards or upwards from position k. To go downwards, we must buy pizza in the range [1,k-1] so we query the minimum
    cost in the range [1,k-1]. Going upwards is similar to going downwards, but instead of buying pizza in the range [1,k-1], we're buying pizza in the
    range [K+1,N]; thus we query the range [K+1,N] in the upwards segtree.


9. Subarray Sum Queries     {Excellent problem}        
    Tags: Segment Trees
        Here each node of the segTree will store 4 metrics(segmentSum, maxPrefixSum, maxSuffixSum, maxSubarraySum)

    Hint: In each node of the segment tree, you'll need to store four pieces of information.

    In each node of the segment tree that stores information about the range [l, r] we store the following information:

        The maximum subarray sum in the range [l, r]. (Let this be G)
        The maximum subarray sum in the range [l, r] if it must contain a[l]. (Letthis be L) --> basically maxPrefixSum
        The maximum subarray sum in the range [l, r] if it must contain a[r]. (Let this be R)  --> basically maxSuffixSum
        The total sum of the range. (Let this be S)


    When we combine two nodes u (left child) and v (right child) to make node w,

        w.G = max(u.G, v.G, u.R + v.L)
        w.L = max(u.L, u.S + v.L)
        w.R = max(u.R + v.S, v.R)
        w.S = u.S + v.S


10. Distinct Value Queries  {Excellent Problem}  -- 3/16 TLE rest accepted

    Given multiple queries of range l,r, count the no of distinct elements in each interval

    Tags: Mo Algorithm 

    Sorting part is clear. We are starting the queries beforehand and then processing them in the sorted order 
    Sorting criteria. For each query we are seeing in which block left endpoint is lying. 2 queries whose left endpoint lies in the same block are arranged in increasing order of their right endpoint
    otherwise we just arrange them in increasing order of their block id 

    TC: O(nlogn) for sorting queries + ..

    OPTIMISATION APPLIED:
    1. Used coordinate compression to compress the array values to smaller indexes starting from 0. Since array value are huge(could go upto a billion)
    2. Used freq array instead of freq map



11. Range Updates and Sums          {Excellent Problem}             -- implementation(bit complex) Pending
    Tags: Segment Tree, lazy propagation, Range updates 

    You now have two types of updates:
	1.	Range add: arr[i] += x for all i ‚àà [l, r]
	2.	Range set: arr[i] = x for all i ‚àà [l, r] ‚Üê this is what we want to add

    These two conflict. You can‚Äôt just store a single lazy[] value anymore ‚Äî you need to differentiate between a ‚Äúset‚Äù and an ‚Äúadd‚Äù operation.

    ‚úÖ Solution Strategy
    We‚Äôll use two separate lazy arrays:
        ‚Ä¢	lazyAdd[]: stores the ‚Äúadd‚Äù value (like before)
        ‚Ä¢	lazySet[]: stores the ‚Äúset‚Äù value
        ‚Ä¢	isSet[]: boolean array to check if the current node has a pending ‚Äúset‚Äù operation

    üõ† Update Operation Logic
    When applying a set operation:
        ‚Ä¢	Clear out any pending ‚Äúadd‚Äù operations in the subtree
        ‚Ä¢	Set the segment to (hi - lo + 1) * x
        ‚Ä¢	Mark children with ‚Äúset x‚Äù if not a leaf

    When applying an add operation:
        ‚Ä¢	If a node has a pending ‚Äúset‚Äù, we should first apply the set before adding
        ‚Ä¢	Normal lazy add otherwise

    NOTES Regarding Lazy Propagation:
        Segment trees are great for:
            ‚Ä¢	Point updates (update a single index)
            ‚Ä¢	Range queries (e.g., sum, min, max of a range)

        But if you want to do a range update, like:

            ‚ÄúAdd 5 to every element from index l to r‚Äù

        ‚Ä¶ a normal segment tree would take O(n) time to update all affected nodes.

        Lazy propagation fixes this by postponing updates until they are actually needed.

        üöÄ Key Idea
            ‚Ä¢	Instead of updating all child nodes immediately during a range update,
            ‚Ä¢	We store the pending update in a separate lazy array.
            ‚Ä¢	When a node is visited during a query or update, we ‚Äúpush‚Äù the pending update to its children.

        This makes both range updates and range queries O(log n)!

        üì¶ Components
            ‚Ä¢	tree[] ‚Äì stores the segment tree values.
            ‚Ä¢	lazy[] ‚Äì stores the delayed updates.

        ‚∏ª

        üõ† How it works

        Update(l, r, val):
            In the update operation, the first thing that you have to check is if there is any lazy update pending for this node. if yes, update the segTree[node] and pass the updates to both its children 
            ‚Ä¢	If the current segment is fully in the update range, update tree[node] and mark the child nodes with the lazy value.
            ‚Ä¢	If partially in range, recurse left/right.

        Query(l, r):
            ‚Ä¢	Before accessing the node, check if there‚Äôs any pending update in lazy[node].
            ‚Ä¢	If yes, apply it to tree[node] and propagate it to the children.
            ‚Ä¢	Continue with normal segment tree query.

        ‚úÖ Time Complexity
        Operation           Time Complexity
            Point update        O(log n)
            Range update        O(log n) 
            Range query         O(log n) 

        üß† Intuition

            Lazy propagation is like leaving a sticky note saying ‚ÄúHey, remember to add 5 here later‚Äù instead of doing the update immediately.
