#include<bits/stdc++.h>
using namespace std;

#define int             long long int
#define endl            "\n"
#define ff              first
#define ss              second
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define FIO             ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define forn(i,n)       for(int i=0;i<n;++i)
#define fore(i, l, r)   for(int i = l; i <= r; ++i)
#define all(v)          v.begin(), v.end()

mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());

void initcode(){
    FIO;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // ONLINE_JUDGE
}
int gcd(int a, int b)
{ // Time Complexity: O(Log min(a, b)) Auxiliary Space: O(Log (min(a,b))
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int32_t main()
{   
    initcode();
    w(t){
        int n; cin>>n;
        int arr[n];
        forn(i,n) cin>>arr[i];
        int sz = n/2;
        vector<int> v;
        bool all_zero=true;
        forn(i,sz){
            int val = abs(arr[i]-arr[n-1-i]);
            v.pb(val);
        }
        
        if(n==1){ // already palindrome
            cout<<"0"<<endl;
        }
        else if(v.size()==1){ // for odd n, middle element is not considered in the
            cout<<v[0]<<endl;
        }
        else{
            int g = gcd(v[0],v[1]);
            fore(i,2,v.size()-1) g = gcd(g,v[i]);
            cout<<g<<endl;
        }


// For the sequence to be a palindrome, it has to satisfy bi=bn−i+1
// . In our case bi=ai(modx)
// . We can rewrite the palindrome equation as ai(modx)=an−i+1(modx)
// . Moving all the terms to the left we get ai−an−i+1≡0(modx)
// , which basically says x
//  divides ai−an−i+1
// .

// Now, how to find the biggest x, which satisfies all such conditions? Greatest common divisor of course! We just need to calculate the GCD
//  of the numbers ai−an−i+1
//  for all i.
        

    }
    

}