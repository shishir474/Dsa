#include<bits/stdc++.h>
using namespace std;

#define int             long long int
#define endl            "\n"
#define ff              first
#define ss              second
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define FIO             ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define forn(i,n)       for(int i=0;i<n;++i)
#define fore(i, l, r)   for(int i = l; i <= r; ++i)
#define all(v)          v.begin(), v.end()

mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());

void initcode(){
    FIO;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // ONLINE_JUDGE
}

int gcd(int a, int b)
{ // Time Complexity: O(Log min(a, b)) Auxiliary Space: O(Log (min(a,b))
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int32_t main()
{   // if there no 1's are present then we can make all elements equal. by taking mod with max(ai) every time. Taking mod with max(ai) ensures a[i] is reduced to 0 first, then take mod with next max element and make it 0.
// Ultimately all elements are converted to 0

// if 1 is present, no two consecutive nos should be present, then only it is possible. Take mod with max(ai)-1 repeatedly. This will convert all elements to 1.

// Our problem here is to find if we can convert all elements to a same no or not

    initcode();
    w(t){
        int n; cin>>n;
        int arr[n];
        
        set<int> s;
        
        bool not_possible=false, is_one_present=false;

        forn(i,n) {
            cin>>arr[i];
            if(arr[i]==1) is_one_present=true;
            s.insert(arr[i]);
            if(s.count(arr[i]-1) || s.count(arr[i]+1)) not_possible = true;
        }

        if(!is_one_present){
            cout<<"YES"<<endl;
        }
        else{
            if(not_possible) cout<<"NO"<<endl;
            else cout<<"YES"<<endl;
        }
                
    }
}