Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists?

Why is Quick Sort preferred for arrays?
Quick Sort in its general form is an in-place sort (i.e. it doesn’t require any extra storage) whereas merge sort requires O(N) 
extra storage, N denoting the array size which may be quite expensive. Allocating and de-allocating the extra space used for 
merge sort increases the running time of the algorithm.
Comparing average complexity we find that both type of sorts have O(NlogN) average complexity but the constants differ. 
For arrays, merge sort loses due to the use of extra O(N) storage space.


Why is Merge Sort preferred for Linked Lists?
In case of linked lists the case is different mainly due to difference in memory allocation of arrays and linked lists. 
Unlike arrays, linked list nodes may not be adjacent in memory.
Unlike array, in linked list, we can insert items in the middle in O(1) extra space and O(1) time if we are given 
reference/pointer to the previous node. Therefore merge operation of merge sort can be implemented without extra space for linked lists.
In arrays, we can do random access as elements are continuous in memory.  Unlike arrays, we can not do random access in linked list.
Quick Sort requires a lot of this kind of access. In linked list to access i’th index, we have to travel each and every node 
from the head to i’th node as we don’t have continuous block of memory. Therefore, the overhead increases for quick sort.
 Merge sort accesses data sequentially and the need of random access is low.